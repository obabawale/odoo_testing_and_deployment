version: 2.1

executors:
  docker-executor:
    docker:
      - image: circleci/python:3.8

jobs:
  test:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Docker Compose
          environment:
            COMPOSE_VERSION: "v2.25.0"
          command: |
            curl -sSL "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            mkdir -p ~/.docker/cli-plugins
            chmod +x ~/docker-compose
            mv ~/docker-compose ~/.docker/cli-plugins/docker-compose
      - run:
          name: Build Docker Image
          command: docker compose -f docker-compose.yml build
      - run:
          name: Run Docker Compose
          environment:
            POSTGRES_PASSWORD: ${DATABASE_PASSWORD} # From CircleCI secret
          command: |
            docker compose -f docker-compose.yml up -d
            docker exec db bash -c "echo \"$POSTGRES_PASSWORD\" > /var/lib/postgresql/data/pgdata/postgresql_password && chmod 600 /var/lib/postgresql/data/pgdata/postgresql_password"
            docker exec web bash -c "echo \"$POSTGRES_PASSWORD\" > /var/lib/odoo/.odoo_pg_pass && chmod 600 /var/lib/odoo/.odoo_pg_pass" #If you need it in web container
      - run:
          name: Run Odoo tests
          command:
            # Run Odoo tests
            # docker compose -f docker-compose.yml run --rm web odoo --db-filter=^mydb$ -d mydb --test-enable --stop-after-init -i certum_service
            docker compose ps # placeholder
      - run:
          name: Stop Docker Compose
          command: docker compose -f docker-compose.yml down

  deploy:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Docker Compose
          environment:
            COMPOSE_VERSION: "v2.25.0"
          command: |
            curl -sSL "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            mkdir -p ~/.docker/cli-plugins
            chmod +x ~/docker-compose
            mv ~/docker-compose ~/.docker/cli-plugins/docker-compose
      - run:
          name: Fix ssh Could not resolve hostname
          command: |
            ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
      - add_ssh_keys:
          fingerprints:
            - "SHA256:pcb1rXI4++zrqYmiNWUwnzWxpuzvBpee7Xi+yZZuYtU"
      - run:
          name: Build Docker Image
          command: docker compose -f docker-compose.yml build
      - run:
          name: Push Docker Image
          command: |
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker tag $DOCKER_USERNAME/oaf-demo:latest $DOCKER_USERNAME/oaf-demo:$CIRCLE_SHA1
            docker push $DOCKER_USERNAME/oaf-demo:$CIRCLE_SHA1
            docker push $DOCKER_USERNAME/oaf-demo:latest  # Or your image name
      - run:
          name: Configure SSH to Use Admin User
          command: |
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh
            echo -e "Host $SSH_HOST\n  User admin\n  IdentityFile ~/.ssh/id_rsa\n  StrictHostKeyChecking no" >> ~/.ssh/config
            chmod 600 ~/.ssh/config
      # - run:
      #     name: Read Module Lists and Execute Odoo Commands
      #     environment:
      #       SSH_USER: ${SSH_USER}
      #       SSH_HOST: ${SSH_HOST}
      #       DOCKER_USERNAME: ${DOCKER_USERNAME}
      #       ODOO_DB: odoo  # Adjust if needed
      #       ODOO_USER: odoo  # Adjust if needed
      #       ODOO_PASSWORD: ${DATABASE_PASSWORD} # Adjust if needed
      #     command: |
      #       SSH_USER=$SSH_USER SSH_HOST=$SSH_HOST DOCKER_USERNAME=$DOCKER_USERNAME ODOO_DB=$ODOO_DB ODOO_USER=$ODOO_USER ODOO_PASSWORD=$ODOO_PASSWORD bash -c '
      #         su - admin
      #         cd /home/admin/odoo_testing_and_deployment

      #         git pull
      #         docker pull $DOCKER_USERNAME/oaf-demo:latest

      #         INSTALL_MODULES=""
      #         if [ -f modules_to_install.txt ]; then
      #           INSTALL_MODULES="-i $(cat modules_to_install.txt | tr "\\n" ",)"
      #           echo "Modules to install: $INSTALL_MODULES"
      #         fi

      #         UPGRADE_MODULES=""
      #         if [ -f modules_to_upgrade.txt ]; then
      #           UPGRADE_MODULES="-u $(cat modules_to_upgrade.txt | tr "\\n" ",)"
      #           echo "Modules to upgrade: $UPGRADE_MODULES"
      #         fi

      #         ODOO_COMMAND=""
      #         if [ -n "$INSTALL_MODULES" ]; then
      #           ODOO_COMMAND="$ODOO_COMMAND $INSTALL_MODULES --stop-after-init"
      #         fi

      #         if [ -n "$UPGRADE_MODULES" ]; then
      #           ODOO_COMMAND="$ODOO_COMMAND $UPGRADE_MODULES --stop-after-init"
      #         fi

      #         if [ -n "$ODOO_COMMAND" ]; then
      #           echo "Executing Odoo command: docker compose exec web odoo -d \\"$ODOO_DB\\" $ODOO_COMMAND --addons-path=/mnt/extra-addons,/usr/lib/python3/dist-packages/odoo/addons -r \\"$ODOO_USER\\" -w \\"$ODOO_PASSWORD\\""
      #           docker compose exec web odoo -d "$ODOO_DB" $ODOO_COMMAND --addons-path=/mnt/extra-addons,/usr/lib/python3/dist-packages/odoo/addons -r "$ODOO_USER" -w "$ODOO_PASSWORD"
      #         else
      #           echo "No modules to install or upgrade."
      #         fi

      #         docker compose -f docker-compose.yml restart web

      #         # Remove the module list files
      #         rm -f modules_to_install.txt
      #         rm -f modules_to_upgrade.txt
      #       '

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - test
      - deploy:
          requires:
            - test
          filters:
            branches:
              only:
                - main